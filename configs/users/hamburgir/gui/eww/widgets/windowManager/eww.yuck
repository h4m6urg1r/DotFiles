;; (include "./widgets/windowManager/windowTitle.yuck")

(deflisten _windowTitle :initial "" ;;"/bin/sh ~/.config/eww/scripts/get-window-title")
 `hyprctl activewindow -j | jq --raw-output .title | sed "s/null//" && socat -u UNIX-CONNECT:/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock - | stdbuf -o0 awk -F '>>|,' '/^activewindow>>/{print $3}'`)
(deflisten _windowClass :initial "" ;;"/bin/sh ~/.config/eww/scripts/get-window-title")
 `hyprctl activewindow -j | jq --raw-output .class | sed "s/null//" && socat -u UNIX-CONNECT:/tmp/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock - | stdbuf -o0 awk -F '>>|,' '/^activewindow>>/{print $2}'`)
(defwidget windowTitle [ ?orientation ]
    (box 
        (label :class "WindowTitle"
               :limit-width 50
               :wrap false
               :truncate-left false
               ;; :hexpand true
               :text _windowClass
			   :tooltip _windowTitle
		)
	)
)

(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(defvar prev_workspace "")
(defwidget workspaces-hyprland []
	(eventbox
		:onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}"
		(box
			:space-evenly true
			:class "workspaces"
			;; (label :text "${workspaces}${current_workspace}" :visible false)
			(for workspace in workspaces
				(eventbox
					:onclick "hyprctl dispatch workspace ${workspace.id}"
					(box
						:class "WS-${workspace.id == current_workspace ? "Active" : "Inactive"}${workspace.windows > 0 ? "Occupied" : "Unoccupied"}"
						;; (label
						;; 	:text "${workspace.id}"
						;; )
						(circular-progress :class "circle" :thickness 5 :start-at 75 :value 100)
						;; (progress :class "WS-PB" :value 50)
						;; ""
					)
				)
			)
		)
	)
)

;; (deflisten workspaces :initial "[]" "bash ~/newNixos/configs/users/hamburgir/gui/eww/scripts/workspace")
;; (defwidget workspaces-hyprland []
;; 	(literal :content workspaces)
;; )

;; TODO: check saymsg -t get_tree -r. Use swaymsg subscribe window and workspace
;; (deflisten _windowTitle)

(deflisten sway-workspace :initial "[]" "swaymsg -t get_workspaces -r | jq --compact-output && swaymsg -t subscribe -m '[\"workspace\", \"window\"]' | while read -r line; do swaymsg -t get_workspaces -r | jq --compact-output; done")
(defwidget workspaces-sway []
	(eventbox
		:onscroll "echo \"{}\" | sed 's|up|prev|; s|down|next|' | xargs swaymsg workspace"
		(box
			:class "workspaceWidget"
			:space-evenly true
			(for workspace in sway-workspace
				(button
					:class "workspace-entry-${workspace.focused? "current" : ""}"
					:onclick "swaymsg workspace ${workspace.num}"
					(label
						:text "${workspace.name} "
					)
				)
			)
		)
	)
)
